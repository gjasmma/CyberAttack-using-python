<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Admin Portal</title>
<style>
  body, html {
    margin: 0; padding: 0; height: 100%;
    font-family: 'Consolas','Courier New', monospace;
    background: radial-gradient(circle at top, #0f0f0f 0%, #000 100%);
    color: #00ff99; overflow: hidden; display: flex; align-items: center; justify-content: center;
  }
  @keyframes matrix {
    0% { transform: translateY(-100%); opacity: 0; }
    100% { transform: translateY(100%); opacity: 1; }
  }
  .matrix-bg { position: absolute; width: 100%; height: 100%; overflow: hidden; z-index: 0; }
  .matrix-bg span {
    position: absolute; top: -20px; color: #00ff99; font-size: 14px;
    animation: matrix linear infinite; opacity: 0.7;
  }
  .card {
    position: relative; z-index: 1; width: 340px;
    background: rgba(20,20,20,0.88); border: 1px solid #00ff99; border-radius: 12px;
    padding: 28px; text-align: center; box-shadow: 0 0 18px #00ff99;
  }
  .card h1 { margin: 0 0 18px; color: #00ffcc; text-shadow: 0 0 10px #00ff99; font-size: 20px; }
  input {
    width: 90%; padding: 12px; margin: 10px 0; border: none; border-radius: 6px;
    background: #111; color: #00ff99; outline: none; box-shadow: inset 0 0 5px #00ff99;
  }
  button {
    width: 95%; padding: 12px; margin-top: 12px; border: none; border-radius: 6px;
    background: linear-gradient(90deg, #00ff99, #00ccff); color: #000; font-weight: bold; cursor: pointer; transition: 0.25s;
  }
  button:hover { transform: scale(1.03); box-shadow: 0 0 14px #00ffcc; }
  .msg { margin-top: 12px; font-size: 0.9em; min-height: 20px; }
  .small { font-size: 0.8em; color: #00ccff; margin-top: 8px; }
</style>
</head>
<body>
  <div class="matrix-bg" id="matrix"></div>
  <div class="card">
    <h1>Admin Portal</h1>
    <input id="username" type="text" placeholder="Username" />
    <input id="password" type="password" placeholder="Password" />
    <button id="loginBtn">Login</button>
    <div class="msg" id="msg"></div>
    <div class="small">Try: admin / superSecurePassword123!</div>
  </div>
<script>
  // Matrix rain
  const matrix = document.getElementById('matrix');
  for (let i = 0; i < 120; i++) {
    const span = document.createElement('span');
    span.textContent = String.fromCharCode(0x30A0 + Math.random() * 96);
    span.style.left = Math.random() * 100 + 'vw';
    span.style.animationDuration = (5 + Math.random() * 10) + 's';
    span.style.animationDelay = (Math.random() * 10) + 's';
    matrix.appendChild(span);
  }

  // Demo "database"
  const users = {
    admin: { password: "superSecurePassword123!", role: "superuser" },
    guest: { password: "1234", role: "viewer" }
  };

  // Brute force protection
  const failedAttempts = {};
  const lockouts = {};

  function msg(t, color) {
    const el = document.getElementById('msg');
    el.textContent = t;
    el.style.color = color || '#00ff99';
  }

  document.getElementById('loginBtn').addEventListener('click', () => {
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value.trim();

    // Check lockout
    if (lockouts[username] && Date.now() < lockouts[username]) {
      msg("‚ùå Account locked. Try later.", "salmon");
      return;
    }

    const user = users[username];
    if (user && user.password === password) {
      msg("‚úÖ Login successful. Role: " + user.role, "lightgreen");
      failedAttempts[username] = 0;
    } else {
      failedAttempts[username] = (failedAttempts[username] || 0) + 1;
      if (failedAttempts[username] >= 3) {
        lockouts[username] = Date.now() + 60 * 1000; // 1 min lockout
        msg("üîí Too many failed attempts. Locked for 1 minute.", "orange");
      } else {
        msg("‚ùå Invalid credentials.", "salmon");
      }
    }
  });
</script>
</body>
</html>
