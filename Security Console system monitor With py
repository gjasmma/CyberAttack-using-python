import socket
import getpass
import random
import time
import hashlib
import os

ALLOWED_PORTS = [80, 443, 22, 8080]
SUSPICIOUS_PORTS = [666, 1337, 31337]
LOG_FILE = "security_console.log"

# --- Utility: Logging ---
def log_event(message):
    with open(LOG_FILE, "a") as f:
        f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")

# --- Banner ---
def show_banner():
    print("=" * 45)
    print("        SECURITY CONSOLE (Demo)        ")
    print("=" * 45)

# --- Login System with Hashed Passwords ---
def login_system():
    # Demo: default user is "admin" with password "password"
    stored_user = "admin"
    stored_hash = hashlib.sha256("password".encode()).hexdigest()

    username = input("Username: ")
    password = getpass.getpass("Password: ")
    entered_hash = hashlib.sha256(password.encode()).hexdigest()

    if username == stored_user and entered_hash == stored_hash:
        print("‚úÖ Login successful.")
        log_event(f"User '{username}' logged in successfully.")
        return True
    else:
        print("‚ùå Invalid credentials.")
        log_event(f"Failed login attempt for user '{username}'.")
        return False

# --- Core Firewall Check ---
def firewall_defense(port_input):
    try:
        port = int(port_input)
        if port in ALLOWED_PORTS:
            print("‚úÖ Port is secure. Access granted.")
            log_event(f"Port {port} allowed.")
            return True
        elif port in SUSPICIOUS_PORTS:
            print("‚ö†Ô∏è Suspicious port detected! Potential cyber attack.")
            log_event(f"Suspicious port {port} detected.")
            return False
        else:
            print("‚ùì Port not recognized. Connection denied.")
            log_event(f"Unknown port {port} denied.")
            return False
    except ValueError:
        print("‚ùå Invalid input. Please enter a valid port number.")
        return False

# --- Feature 1: IP Detector ---
def ip_detector():
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    print(f"üñ•Ô∏è Hostname: {hostname}")
    print(f"üåê Local IP Address: {ip_address}")
    log_event("IP Detector used.")

# --- Feature 2: Password Changer (demo only) ---
def password_changer():
    old_pass = getpass.getpass("Enter current password: ")
    new_pass = getpass.getpass("Enter new password: ")
    confirm_pass = getpass.getpass("Confirm new password: ")
    if new_pass == confirm_pass:
        print("üîê Password successfully changed (demo).")
        log_event("Password changed (demo).")
    else:
        print("‚ùå Passwords do not match. Try again.")

# --- Feature 3: Malware Detector (simulated) ---
def malware_detector():
    print("ü¶† Scanning system for malware...")
    time.sleep(2)
    print("‚úÖ No malware detected. System clean.")
    log_event("Malware scan completed.")

# --- Feature 4: Ransomware Detector (simulated) ---
def ransomware_detector():
    print("üîí Checking for ransomware activity...")
    time.sleep(2)
    print("‚úÖ No ransomware signatures found.")
    log_event("Ransomware scan completed.")

# --- Feature 5: DoS Attack Checker (simulated) ---
def dos_checker():
    print("üì° Monitoring traffic for DoS patterns...")
    time.sleep(2)
    suspicious = random.choice([True, False])
    if suspicious:
        print("‚ö†Ô∏è High traffic anomaly detected! Possible DoS attempt.")
        log_event("DoS anomaly detected.")
    else:
        print("‚úÖ Traffic levels normal.")
        log_event("DoS check normal.")

# --- Feature 6: Website Analyzer (demo) ---
def website_analyzer():
    url = input("Enter website URL: ")
    print(f"üåç Analyzing {url} ...")
    time.sleep(2)
    print("‚úÖ SSL Certificate: Valid")
    print("‚úÖ Response Time: 120ms")
    print("‚úÖ No known vulnerabilities found (demo).")
    log_event(f"Website analyzed: {url}")

# --- Feature 7: Port Scanner (simulated) ---
def port_scanner():
    print("üîé Scanning common ports...")
    time.sleep(2)
    open_ports = [22, 80, 443]
    print(f"‚úÖ Open ports detected: {open_ports}")
    log_event("Port scan completed.")

# --- Feature 8: System Log Viewer ---
def log_viewer():
    print("üìú Displaying last 5 log entries:")
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            lines = f.readlines()[-5:]
            for line in lines:
                print(line.strip())
    else:
        print("No logs available.")

# --- Feature 9: Encryption Demo ---
def encryption_demo():
    text = input("Enter text to encrypt: ")
    encrypted = "".join(chr(ord(c) + 3) for c in text)  # Caesar cipher
    print(f"üîê Encrypted text: {encrypted}")
    log_event("Encryption demo used.")

# --- Feature 10: User Session Monitor (simulated) ---
def session_monitor():
    print("üë• Active sessions:")
    print(" - admin (192.168.1.10)")
    print(" - guest (192.168.1.15)")
    log_event("Session monitor viewed.")

# --- Feature 11: Real-time System Monitor (simulated) ---
def system_monitor():
    print("üìä Real-time System Monitor (press Ctrl+C to stop)")
    try:
        while True:
            cpu = random.randint(1, 100)
            ram = random.randint(1, 100)
            print(f"CPU Usage: [{'#' * (cpu // 5)}{' ' * (20 - cpu // 5)}] {cpu}%")
            print(f"RAM Usage: [{'#' * (ram // 5)}{' ' * (20 - ram // 5)}] {ram}%\n")
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nExiting System Monitor...")
        log_event("System monitor stopped.")

# --- Main Menu ---
def main_menu():
    while True:
        print("\n--- Security Console ---")
        print("1. IP Detector")
        print("2. Password Changer")
        print("3. Malware Detector")
        print("4. Ransomware Detector")
        print("5. DoS Checker")
        print("6. Website Analyzer")
        print("7. Port Scanner")
        print("8. Log Viewer")
        print("9. Encryption Demo")
        print("10. Session Monitor")
        print("11. System Monitor")
        print("12. Exit")
        choice = input("Select an option: ")

        if choice == "1":
            ip_detector()
        elif choice == "2":
            password_changer()
        elif choice == "3":
            malware_detector()
        elif choice == "4":
            ransomware_detector()
        elif choice == "5":
            dos_checker()
        elif choice == "6":
            website_analyzer()
        elif choice == "7":
            port_scanner()
        elif choice == "8":
            log_viewer()
        elif choice == "9":
            encryption_demo()
        elif choice == "10":
            session_monitor()
        elif choice == "11":
            system_monitor()
        elif choice == "12":
            print("üëã Exiting Security Console. Stay safe!")
            break
        else:
            print("‚ùå Invalid choice. Please try again.")

# --- Entry Point ---
if __name__ == "__main__":
    show_banner()
    if login_system():
        user_input = input("Enter a port number to connect: ")
        if firewall_defense(user_input):
            main_menu()
